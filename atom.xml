<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-15T08:11:20.877Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ActivityManager简要分析</title>
    <link href="http://example.com/2023/04/15/ActivityManager%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2023/04/15/ActivityManager%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</id>
    <published>2023-04-15T07:28:23.000Z</published>
    <updated>2023-04-15T08:11:20.877Z</updated>
    
    <content type="html"><![CDATA[<p>ActivityManager提供了关于Activity，Service信息，大多数场景下不需要使用，但是其中也提供了几个重要的方法，比如isLowRamDevice，判读是否运行在一个低内存手机上，或者clearApplicationUserData 重置应用数据。</p><p>如果应用需要同Task stack打交道，也可能会用到其中的ActivityManager.AppTask和ActivityManager.RecentTaskInfo,另外还涉及到一些进程相关的api</p><p>ActivityManager交互的对象很多，比如像最近任务、进程、服务等等。</p><p><b><font color="#dd0000">Task相关</font></b></p><ul><li>获取应用的任务信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the list of tasks associated with the calling application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The list of tasks associated with the application making this call.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SecurityException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ActivityManager.AppTask&gt; getAppTasks() &#123;</span><br><span class="line">    ArrayList&lt;AppTask&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;AppTask&gt;();</span><br><span class="line">    List&lt;IBinder&gt; appTasks;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        appTasks = getTaskService().getAppTasks(mContext.getOpPackageName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">numAppTasks</span> <span class="operator">=</span> appTasks.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numAppTasks; i++) &#123;</span><br><span class="line">        tasks.add(<span class="keyword">new</span> <span class="title class_">AppTask</span>(IAppTask.Stub.asInterface(appTasks.get(i))));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>添加任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*  Add a new ActivityManager.AppTask for the calling application. This will create a new recents entry that is added to the end of all existing recents.</span></span><br><span class="line"><span class="comment">Params:</span></span><br><span class="line"><span class="comment">activity – The activity that is adding the entry. This is used to help determine the context that the new recents entry will be in.</span></span><br><span class="line"><span class="comment">intent – The Intent that describes the recents entry. This is the same Intent that you would have used to launch the activity for it. In generally you will want to set both Intent.FLAG_ACTIVITY_NEW_DOCUMENT and Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS; the latter is required since this recents entry will exist without an activity, so it doesn&#x27;t make sense to not retain it when its activity disappears. The given Intent here also must have an explicit ComponentName set on it.</span></span><br><span class="line"><span class="comment">description – Optional additional description information.</span></span><br><span class="line"><span class="comment">thumbnail – Thumbnail to use for the recents entry. Should be the size given by getAppTaskThumbnailSize(). If the bitmap is not that exact size, it will be recreated in your process, probably in a way you don&#x27;t like, before the recents entry is added.</span></span><br><span class="line"><span class="comment">Returns:</span></span><br><span class="line"><span class="comment">Returns the task id of the newly added app task, or -1 if the add failed. The most likely cause of failure is that there is no more room for more tasks for your app.*/</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addAppTask</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@NonNull</span> Intent intent,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> TaskDescription description, <span class="meta">@NonNull</span> Bitmap thumbnail)</span> </span><br></pre></td></tr></table></figure></li><li><p>移动任务</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void moveTaskToFront(int taskId, @MoveTaskFlags int flags) &#123;</span><br><span class="line">    moveTaskToFront(taskId, flags, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b><font color="#dd0000">服务相关</font></b></p><ul><li>获取运行时服务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;RunningServiceInfo&gt; <span class="title function_">getRunningServices</span><span class="params">(<span class="type">int</span> maxNum)</span></span><br><span class="line">        <span class="keyword">throws</span> SecurityException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getService()</span><br><span class="line">                .getServices(maxNum, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b><font color="#dd0000">内存管理相关</font></b></p><p>定义了内部类MemoryInfo,主要属性如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MemoryInfo</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The available memory on the system.  This number should not</span></span><br><span class="line"><span class="comment">     * be considered absolute: due to the nature of the kernel, a significant</span></span><br><span class="line"><span class="comment">     * portion of this memory is actually in use and needed for the overall</span></span><br><span class="line"><span class="comment">     * system to run well.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> availMem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The total memory accessible by the kernel.  This is basically the</span></span><br><span class="line"><span class="comment">     * RAM size of the device, not including below-kernel fixed allocations</span></span><br><span class="line"><span class="comment">     * like DMA buffers, RAM for the baseband CPU, etc.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> totalMem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The threshold of &#123;<span class="doctag">@link</span> #availMem&#125; at which we consider memory to be</span></span><br><span class="line"><span class="comment">     * low and start killing background services and other non-extraneous</span></span><br><span class="line"><span class="comment">     * processes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set to true if the system considers itself to currently be in a low</span></span><br><span class="line"><span class="comment">     * memory situation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> lowMemory;</span><br><span class="line"> <span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此可以获取内存相关的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMemoryInfo</span><span class="params">(MemoryInfo outInfo)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        getService().getMemoryInfo(outInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b><font color="#dd0000">进程异常状态监控</font></b></p><p>内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Information you can retrieve about any processes that are in an error condition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ProcessErrorStateInfo</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> &#123;</span><br><span class="line">          <span class="keyword">public</span> <span class="type">int</span> condition;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The process name in which the crash or error occurred.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String processName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The pid of this process; 0 if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The kernel user-ID that has been assigned to this process;</span></span><br><span class="line"><span class="comment">     * currently this is not a unique ID (multiple applications can have</span></span><br><span class="line"><span class="comment">     * the same uid).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> uid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The activity name associated with the error, if known.  May be null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String tag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A short message describing the error condition.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String shortMsg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A long message describing the error condition.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String longMsg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The stack trace where the error originated.  May be null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String stackTrace;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * to be deprecated: This value will always be null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] crashData = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可见其中的crashData是我们重点关注的数据</p><ul><li>调用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ProcessErrorStateInfo&gt; <span class="title function_">getProcessesInErrorState</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getService().getProcessesInErrorState();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b><font color="#dd0000">运行时进程相关</font></b></p><p>内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RunningAppProcessInfo</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> String processName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The pid of this process; 0 if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The user id of this process.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> uid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * All packages that have been loaded into the process.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String pkgList[];</span><br><span class="line">   <span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>设置内存level</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setProcessMemoryTrimLevel</span><span class="params">(String process, <span class="type">int</span> userId, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getService().setProcessMemoryTrimLevel(process, userId,</span><br><span class="line">                level);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取运行时进程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;RunningAppProcessInfo&gt; <span class="title function_">getRunningAppProcesses</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getService().getRunningAppProcesses();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取进程状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUidProcessState</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getService().getUidProcessState(uid, mContext.getOpPackageName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取进程状态信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Debug.MemoryInfo[] getProcessMemoryInfo(<span class="type">int</span>[] pids) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> getService().getProcessMemoryInfo(pids);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>杀死后台进程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killBackgroundProcesses</span><span class="params">(String packageName)</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         getService().killBackgroundProcesses(packageName,</span><br><span class="line">                 mContext.getUserId());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ActivityManager提供了关于Activity，Service信息，大多数场景下不需要使用，但是其中也提供了几个重要的方法，比如isLowRamDevice，判读是否运行在一个低内存手机上，或者clearApplicationUserData 重置应用数据。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android包结构分析</title>
    <link href="http://example.com/2023/04/15/Android%E5%8C%85%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2023/04/15/Android%E5%8C%85%E5%88%86%E6%9E%90/</id>
    <published>2023-04-15T02:52:17.000Z</published>
    <updated>2023-04-15T07:28:31.028Z</updated>
    
    <content type="html"><![CDATA[<p>好比用java的要熟悉jdk，Android的jar包也是需要深入了解，才能在宏观上有所把握。</p><ul><li>android<br>  - app<br>  - content<br>  - service<br>  - View</li><li>dalvik<ul><li>system</li></ul></li></ul><p>以上几个包的内容都是目前需要重点掌握的，后面的源码分析也按照这个顺序为主</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好比用java的要熟悉jdk，Android的jar包也是需要深入了解，才能在宏观上有所把握。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;android&lt;br&gt;  - app&lt;br&gt;  - content&lt;br&gt;  - service&lt;br&gt;  - View&lt;/li&gt;
&lt;li&gt;dalvik</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Activity分析</title>
    <link href="http://example.com/2023/04/15/Activity%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2023/04/15/Activity%E5%88%86%E6%9E%90/</id>
    <published>2023-04-15T02:52:17.000Z</published>
    <updated>2023-04-15T06:07:36.508Z</updated>
    
    <content type="html"><![CDATA[<p>Activity作为四大组件之一，其重要性不言而喻。但是之前对于Activity的了解也只是限于生命周期，启动流程等过程，比较零散，没有系统的整理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Activity</span> <span class="keyword">extends</span> <span class="title class_">ContextThemeWrapper</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">LayoutInflater</span>.Factory2,</span><br><span class="line">        Window.Callback, KeyEvent.Callback,</span><br><span class="line">        OnCreateContextMenuListener, ComponentCallbacks2,</span><br><span class="line">        Window.OnWindowDismissedCallback,</span><br><span class="line">        AutofillManager.AutofillClient, ContentCaptureManager.ContentCaptureClient </span><br></pre></td></tr></table></figure><p>从继承和实现关系上看，Activity继承自ContextThemeWrapper，同时实现了以下几个接口，从接口名称上大致可以判断，Activity还要和View，Window，KeyEvent等进行交互。所以也不仅仅是限于生命周期管理这么简单。</p><p>下面是一些重要的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Instrumentation mInstrumentation;</span><br><span class="line"><span class="keyword">private</span> IBinder mToken;</span><br><span class="line"><span class="keyword">private</span> IBinder mShareableActivityToken;</span><br><span class="line"><span class="keyword">private</span> Application mApplication;</span><br><span class="line"><span class="comment">/*package*/</span> Intent mIntent;</span><br><span class="line"><span class="keyword">private</span> ComponentName mComponent;</span><br><span class="line"><span class="comment">/*package*/</span> ActivityInfo mActivityInfo;</span><br><span class="line"><span class="comment">/*package*/</span> ActivityThread mMainThread;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;Application.ActivityLifecycleCallbacks&gt; mActivityLifecycleCallbacks =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Application.ActivityLifecycleCallbacks&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Window mWindow;</span><br><span class="line"><span class="keyword">private</span> WindowManager mWindowManager;</span><br><span class="line"><span class="comment">/*package*/</span> <span class="type">View</span> <span class="variable">mDecor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Handler</span> <span class="variable">mHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">FragmentController</span> <span class="variable">mFragments</span> <span class="operator">=</span> FragmentController.createController(<span class="keyword">new</span> <span class="title class_">HostCallbacks</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Thread mUiThread;</span><br><span class="line"><span class="keyword">private</span> SplashScreen mSplashScreen;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到Activity很忙，跟它交互的对象有很多。一个个看</p><ul><li><p>mInstrumentation</p><p>在代码中搜索它的作用只不过是对Activity的一些生命周期操作进行转发，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivityForResult</span><span class="params">(<span class="meta">@RequiresPermission</span> Intent intent, <span class="type">int</span> requestCode,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> Bundle options)</span> &#123;</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">                mInstrumentation.execStartActivity(</span><br><span class="line">                    <span class="built_in">this</span>, mMainThread.getApplicationThread(), mToken, <span class="built_in">this</span>,</span><br><span class="line">                    intent, requestCode, options);</span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>它的初始化则是在attach方法中注入。attach其实就是负责完成了Activity中的属性的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span><br><span class="line"><span class="params">            Instrumentation instr, IBinder token, <span class="type">int</span> ident,</span></span><br><span class="line"><span class="params">            Application application, Intent intent, ActivityInfo info,</span></span><br><span class="line"><span class="params">            CharSequence title, Activity parent, String id,</span></span><br><span class="line"><span class="params">            NonConfigurationInstances lastNonConfigurationInstances,</span></span><br><span class="line"><span class="params">            Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span></span><br><span class="line"><span class="params">            Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,</span></span><br><span class="line"><span class="params">            IBinder shareableActivityToken)</span> &#123;</span><br><span class="line">        attachBaseContext(context);</span><br><span class="line"></span><br><span class="line">        mFragments.attachHost(<span class="literal">null</span> <span class="comment">/*parent*/</span>);</span><br><span class="line"></span><br><span class="line">        mWindow = <span class="keyword">new</span> <span class="title class_">PhoneWindow</span>(<span class="built_in">this</span>, window, activityConfigCallback);</span><br><span class="line">        mWindow.setWindowControllerCallback(mWindowControllerCallback);</span><br><span class="line">        mWindow.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        mWindow.setOnWindowDismissedCallback(<span class="built_in">this</span>);</span><br><span class="line">        mWindow.getLayoutInflater().setPrivateFactory(<span class="built_in">this</span>);</span><br><span class="line">        </span><br><span class="line">        mUiThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        mMainThread = aThread;</span><br><span class="line">        mInstrumentation = instr;</span><br><span class="line">        mToken = token;</span><br><span class="line">        mAssistToken = assistToken;</span><br><span class="line">        mShareableActivityToken = shareableActivityToken;</span><br><span class="line">        mIdent = ident;</span><br><span class="line">        mApplication = application;</span><br><span class="line">        mIntent = intent;</span><br><span class="line">        mReferrer = referrer;</span><br><span class="line">        mComponent = intent.getComponent();</span><br><span class="line">        mActivityInfo = info;</span><br><span class="line">        mTitle = title;</span><br><span class="line">        mParent = parent;</span><br><span class="line">        mEmbeddedID = id;</span><br><span class="line">        mLastNonConfigurationInstances = lastNonConfigurationInstances;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        mWindow.setWindowManager(</span><br><span class="line">                (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class="line">                mToken, mComponent.flattenToString(),</span><br><span class="line">                (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (mParent != <span class="literal">null</span>) &#123;</span><br><span class="line">            mWindow.setContainer(mParent.getWindow());</span><br><span class="line">        &#125;</span><br><span class="line">        mWindowManager = mWindow.getWindowManager();</span><br><span class="line">        mCurrentConfig = config;</span><br><span class="line"></span><br><span class="line">        mWindow.setColorMode(info.colorMode);</span><br><span class="line">        mWindow.setPreferMinimalPostProcessing(</span><br><span class="line">                (info.flags &amp; ActivityInfo.FLAG_PREFER_MINIMAL_POST_PROCESSING) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        setAutofillOptions(application.getAutofillOptions());</span><br><span class="line">        setContentCaptureOptions(application.getContentCaptureOptions());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>熟悉Activity启动的话就会知道Activity的attach方法是在ActivityThread的 performLaunchActivity中调用的，初始化的内容比较多，想说的就是除了mWindow和mUiThread实在本地new出来的，其他的都是外部注入的，因此外部注入的对象可以只分析在当前对象中的作用，完整的功能机制后面在做分析。</p></li><li><p>mToken</p><p>mToken是一个IBinder对象，Activity中没有调用其方法，只是把它作为一个参数传来传去，但是随便跟踪一个方法，然后找到mToken具体调用的地方，会发现，mToken其实是一个ActivityRecord 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Token</span> <span class="keyword">extends</span> <span class="title class_">Binder</span> &#123;</span><br><span class="line">    <span class="meta">@NonNull</span> WeakReference&lt;ActivityRecord&gt; mActivityRef;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Token&#123;&quot;</span> + Integer.toHexString(System.identityHashCode(<span class="built_in">this</span>)) + <span class="string">&quot; &quot;</span></span><br><span class="line">                + mActivityRef.get() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持有ActivityRecord的弱引用，因此也可以说他其实是一个ActiviytRecord对象。</p></li><li><p>mShareableActivityToken</p><p>也是ActivityRecord中的一个属性，尚不清楚具体作用</p></li><li><p>mApplication</p><p>mApplication不用多说，获取应用程序相关的信息</p></li><li><p>mIntent</p><p>当前Activity相关的intent</p></li><li><p>mActivityInfo</p><p>ActivityInfo类型对象，跟Activity一一对应</p></li><li><p>mMainThread</p><p>ActivityThead类型，ActivityThead是应用程序的main thread，在Activity中调用了两个方法</p><p>  getApplicationThread ： 返回的是一个IBinder对象，用于跨进程通信</p></li></ul><p>​         sendActivityResult： 发送结果给Activity，onActivityResult会被调用</p><ul><li><p>mActivityLifecycleCallbacks</p><p>主要跟Lifecycler结合使用，在生命周期改变时调用dispatchActivityXXX来完成相关接口的分发</p></li><li><p>mWindow，mWindowManager</p><p>每个activity对应着一个窗口</p></li><li><p>mDecor</p><p>视图的根view</p></li><li><p>mFragments</p><p>生命周期变化时调用相关的Framgent方法，完成Fragment的生命周期调用</p></li><li><p>mUiThread</p><p>当前Activity的运行线程，用来做主线程判断</p></li><li><p>mSplashScreen</p><p>跟闪屏进行交互</p></li></ul><p>以上便是Actvity中的一些重要对象，Activity的行为都跟他们息息相关。从面相对象的角度思考，清楚了Activity的交互对象，那么Activity的行为大致也就了解了，比如跟instrumentaion交互管理activity的启动，跟winow交互管理对应的窗口，也可以同SplashScreen交互，或者管理Framgent的启动等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Activity作为四大组件之一，其重要性不言而喻。但是之前对于Activity的了解也只是限于生命周期，启动流程等过程，比较零散，没有系统的整理。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>杂记（1）</title>
    <link href="http://example.com/2023/04/05/%E6%9D%82%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>http://example.com/2023/04/05/%E6%9D%82%E8%AE%B0%EF%BC%881%EF%BC%89/</id>
    <published>2023-04-05T06:58:02.000Z</published>
    <updated>2023-04-15T02:52:23.941Z</updated>
    
    <content type="html"><![CDATA[<p><em>不注重研究现状，不注重研究历史，不注重马克思列宁主义的应用，这些都是极坏的作风。</em></p><p>​                              出自《改造我们的学习》毛泽东 </p><p>了解过去，掌握规律，把握当下。无忧无虑的幻想总是轻松自在的，而面对现实的时候则总是耗费精力的，这也是为什么会感到疲惫。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;不注重研究现状，不注重研究历史，不注重马克思列宁主义的应用，这些都是极坏的作风。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;​																	                              出自《改造我们的学习》毛泽东 &lt;/p&gt;
&lt;p&gt;了解过去，掌握规律</summary>
      
    
    
    
    
  </entry>
  
</feed>
